name: Build Stats API

on:
  push:
    paths:
      - "stats/**"
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Build UUID list file
        run: |
          node <<EOF
          const fs = require('fs');
          const path = require('path');
          const statsDir = path.join(process.cwd(), 'stats');
          const uuids = [];
          fs.readdirSync(statsDir).forEach(file => {
            if (file.endsWith('.json')) {
              const uuid = file.replace(/\.json$/, '');
              uuids.push(uuid);
            }
          });
          fs.writeFileSync(path.join(process.cwd(), 'uuid-list.json'), JSON.stringify(uuids, null, 2));
          EOF

    - name: Update Username Map
      run: |
        node <<EOF
        const fs = require('fs').promises;
        const path = require('path');
        const fetch = require('node-fetch');

        const statsDir = path.join(process.cwd(), 'stats');
        const usernameMapPath = path.join(process.cwd(), 'username_map.json');

        async function getUsername(uuid) {
          try {
            const response = await fetch(`https://corsjangsessionserver.b-cdn.net/session/minecraft/profile/${uuid}`);
            if (!response.ok) {
              if (response.status === 429) { 
                console.warn(`Rate limited by Mojang API. Skipping ${uuid} for now.`);
                return null;
              }
              throw new Error(`Mojang API error: ${response.status}`);
            }
            const data = await response.json();
            return data.name;
          } catch (error) {
            console.error(`Error fetching username for ${uuid}:`, error);
            return "??";
          }
        }

        async function updateUsernameMap() {
          let usernameMap = {};
          try {
            if (await fs.stat(usernameMapPath).catch(() => false)) {
              usernameMap = JSON.parse(await fs.readFile(usernameMapPath, 'utf8'));
            }
          } catch (error) {
            console.error("Error reading username map:", error);
          }

          const files = await fs.readdir(statsDir);
          for (const file of files) {
            if (path.extname(file) === '.json') {
              const uuid = file.slice(0, -5);
              if (!usernameMap[uuid] || usernameMap[uuid] === "??") {
                const username = await getUsername(uuid);
                if (username !== null) {
                  usernameMap[uuid] = username;
                  console.log(`Mapped UUID ${uuid} to username ${username}`);
                }
              }
            }
          }

          await fs.writeFile(usernameMapPath, JSON.stringify(usernameMap, null, 2), 'utf8');
          console.log("Username map updated successfully.");
        }

        updateUsernameMap().catch(err => {
            console.error("Unhandled error in updateUsernameMap:", err);
            process.exit(1);
        });
        EOF

      - name: Commit and Push
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add uuid-list.json
          git add username_map.json
          git commit -m "Update uuid-list.json" || echo "No changes to commit"
          git push
        if: success()
